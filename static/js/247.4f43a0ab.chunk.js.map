{"version":3,"file":"static/js/247.4f43a0ab.chunk.js","mappings":"yNA4CA,UAxCa,WACX,IAAQA,GAAYC,EAAAA,EAAAA,KAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,CAAC,GAAxC,eAAOC,EAAP,KAAgBC,EAAhB,KAcA,OAXAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAI,mCAAG,qGACSC,EAAAA,EAAAA,IAASP,GADlB,OACLQ,EADK,OAEXJ,EAAWI,GAFA,2CAAH,qDAKNR,GAASM,GACd,GAAE,CAACN,IAEJS,QAAQC,IAAIP,IAGV,+BACE,wBACGA,GACCA,EAAQQ,KAAI,YAAqD,IAAlDC,EAAiD,EAAjDA,GAAIC,EAA6C,EAA7CA,aAAcC,EAA+B,EAA/BA,cAA+B,EAAhBC,UAC9C,OACE,2BACE,gBACEC,IACEH,EAAY,UAtBT,mCAsBS,OACUA,GAClB,0CAENI,IAAI,UAEN,uBAAIH,MATGF,EAYZ,OAIV,C,8JCvCKM,EAAU,CACdC,OAAQ,MACRC,QAAS,CACPC,OAAQ,mBACRC,cAAe,+NAIbC,EAAS,mCAAG,iHAGSC,MAAM,+DAAgEN,GAH/E,cAGRO,EAHQ,gBAIKA,EAASC,OAJd,cAIRC,EAJQ,gBAKOA,EAAKC,QALZ,cAKRC,EALQ,yBAOPA,GAPO,2DASPpB,QAAQqB,MAAR,OATO,0DAAH,qDAaTC,EAAY,mCAAG,WAAOC,GAAP,oGAGMR,MAAM,mDAAD,OAAoDQ,EAApD,8CAA6Gd,GAHxH,cAGXO,EAHW,gBAIEA,EAASC,OAJX,cAIXC,EAJW,gBAKIA,EAAKC,QALT,cAKXC,EALW,yBAOVA,GAPU,2DASVpB,QAAQqB,MAAR,OATU,0DAAH,sDAaZG,EAAU,mCAAG,WAAOjC,GAAP,kGAEQwB,MAAM,sCAAD,OAAuCxB,EAAvC,mBAAiEkB,GAF9E,cAETO,EAFS,gBAGIA,EAASC,OAHb,cAGTC,EAHS,yBAKRA,GALQ,2DAORlB,QAAQqB,MAAR,OAPQ,0DAAH,sDAWVvB,EAAQ,mCAAG,WAAOP,GAAP,kGAEUwB,MAAM,sCAAD,OAAuCxB,EAAvC,2BAAyEkB,GAFxF,cAEPO,EAFO,gBAGMA,EAASC,OAHf,cAGPC,EAHO,yBAKNA,EAAKrB,MALC,2DAONG,QAAQqB,MAAR,OAPM,0DAAH,qD,sBChDd,SAASI,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,KAInB,CAHE,MAAOb,GAEP,YADAO,EAAOP,EAET,CAEIY,EAAKE,KACPR,EAAQO,GAERE,QAAQT,QAAQO,GAAOG,KAAKR,EAAOC,EAEvC,CAEe,SAASQ,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIP,SAAQ,SAAUT,EAASC,GACpC,IAAIF,EAAMa,EAAGK,MAAMJ,EAAME,GAEzB,SAASb,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,EAClE,CAEA,SAASJ,EAAOe,GACdpB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASe,EACnE,CAEAhB,OAAMiB,EACR,GACF,CACF,C","sources":["components/Cast/Cast.jsx","getMovies.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["import { useStateContext } from 'context/StateContext';\nimport { useEffect, useState } from 'react';\nimport { getCasts } from '../../getMovies';\n\nconst Cast = () => {\n  const { movieId } = useStateContext();\n  const [acteurs, setActeurs] = useState({});\n  const BASE_URL_IMG = 'https://image.tmdb.org/t/p/w500';\n\n  useEffect(() => {\n    const cast = async () => {\n      const casts = await getCasts(movieId);\n      setActeurs(casts);\n      // console.log(casts);\n    };\n    if (movieId) cast();\n  }, [movieId]);\n\n  console.log(acteurs);\n\n  return (\n    <>\n      <ul>\n        {acteurs &&\n          acteurs.map(({ id, profile_path, original_name, character }) => {\n            return (\n              <li key={id}>\n                <img\n                  src={\n                    profile_path\n                      ? `${BASE_URL_IMG}${profile_path}`\n                      : 'https://picsum.photos/seed/cats/230/345'\n                  }\n                  alt=\"name\"\n                />\n                <p>{original_name}</p>\n              </li>\n            );\n          })}\n      </ul>\n    </>\n  );\n};\n\nexport default Cast;\n","// import { useStateContext } from './context/StateContext';\n// const { movieId } = useStateContext();\n\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIzNzAwNGViNTJkYTE4NDRjODU4YjE1MzdlYzk1YTk5ZiIsInN1YiI6IjY0OGFkN2JlNDJiZjAxMDEwMWJjYjVlZiIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.x090TXHYahh2QUQ1L2zsDvYpVzC9FYM2zQzILJ2OICE'\n  }\n};\n\nconst getTrends = async () => {\n\n  try {\n    const response = await fetch('https://api.themoviedb.org/3/trending/all/day?language=en-US', options);\n    const resp = await response.json();\n    const movies = await resp.results;\n    // console.log(movies)\n    return movies;\n  } catch (err) {\n    return console.error(err);\n  }\n}\n\nconst searchMovies = async (searchValue) => {  \n\n  try {\n    const response = await fetch(`https://api.themoviedb.org/3/search/movie?query=${searchValue}&include_adult=false&language=en-US&page=1`, options)\n    const resp = await response.json();\n    const movies = await resp.results;\n    // console.log(movies)\n    return movies;\n  } catch (err) {\n    return console.error(err);\n  }\n}\n\nconst getMovieId = async (movieId) => {\n  try {\n    const response = await fetch(`https://api.themoviedb.org/3/movie/${movieId}?language=en-US`, options)\n    const resp = await response.json();\n    \n    return resp;\n  } catch (err) {\n    return console.error(err);\n  }\n}\n\nconst getCasts = async (movieId) => {\n  try {\n    const response = await fetch(`https://api.themoviedb.org/3/movie/${movieId}/credits?language=en-US`, options)\n    const resp = await response.json();\n    \n    return resp.cast;\n  } catch (err) {\n    return console.error(err);\n  }\n}\n\nexport { getTrends, searchMovies, getMovieId, getCasts }\n\n// API Key: 37004eb52da1844c858b1537ec95a99f\n// https://api.themoviedb.org/3/movie/550?api_key=37004eb52da1844c858b1537ec95a99f","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["movieId","useStateContext","useState","acteurs","setActeurs","useEffect","cast","getCasts","casts","console","log","map","id","profile_path","original_name","character","src","alt","options","method","headers","accept","Authorization","getTrends","fetch","response","json","resp","results","movies","error","searchMovies","searchValue","getMovieId","asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}